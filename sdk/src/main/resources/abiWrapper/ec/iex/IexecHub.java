package ec.iex;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.5.0.
 */
public class IexecHub extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_M_CONTRIBUTIONHISTORY = "m_contributionHistory";

    public static final String FUNC_APPHUB = "appHub";

    public static final String FUNC_STAKE_BONUS_MIN_THRESHOLD = "STAKE_BONUS_MIN_THRESHOLD";

    public static final String FUNC_M_SCORES = "m_scores";

    public static final String FUNC_WORKERPOOLHUB = "workerPoolHub";

    public static final String FUNC_SCORE_UNITARY_SLASH = "SCORE_UNITARY_SLASH";

    public static final String FUNC_STAKE_BONUS_RATIO = "STAKE_BONUS_RATIO";

    public static final String FUNC_M_CATEGORIESCOUNT = "m_categoriesCount";

    public static final String FUNC_MARKETPLACE = "marketplace";

    public static final String FUNC_RLC = "rlc";

    public static final String FUNC_M_CATEGORIESCREATOR = "m_categoriesCreator";

    public static final String FUNC_DATASETHUB = "datasetHub";

    public static final String FUNC_M_ACCOUNTS = "m_accounts";

    public static final String FUNC_M_WOIDREGISTERED = "m_woidRegistered";

    public static final String FUNC_M_CATEGORIES = "m_categories";

    public static final String FUNC_ATTACHCONTRACTS = "attachContracts";

    public static final String FUNC_SETCATEGORIESCREATOR = "setCategoriesCreator";

    public static final String FUNC_CREATECATEGORY = "createCategory";

    public static final String FUNC_CREATEWORKERPOOL = "createWorkerPool";

    public static final String FUNC_CREATEAPP = "createApp";

    public static final String FUNC_CREATEDATASET = "createDataset";

    public static final String FUNC_BUYFORWORKORDER = "buyForWorkOrder";

    public static final String FUNC_ISWOIDREGISTRED = "isWoidRegistred";

    public static final String FUNC_CLAIMFAILEDCONSENSUS = "claimFailedConsensus";

    public static final String FUNC_FINALIZEWORKORDER = "finalizeWorkOrder";

    public static final String FUNC_GETCATEGORYWORKCLOCKTIMEREF = "getCategoryWorkClockTimeRef";

    public static final String FUNC_EXISTINGCATEGORY = "existingCategory";

    public static final String FUNC_GETCATEGORY = "getCategory";

    public static final String FUNC_GETWORKERSTATUS = "getWorkerStatus";

    public static final String FUNC_GETWORKERSCORE = "getWorkerScore";

    public static final String FUNC_REGISTERTOPOOL = "registerToPool";

    public static final String FUNC_UNREGISTERFROMPOOL = "unregisterFromPool";

    public static final String FUNC_EVICTWORKER = "evictWorker";

    public static final String FUNC_LOCKFORORDER = "lockForOrder";

    public static final String FUNC_UNLOCKFORORDER = "unlockForOrder";

    public static final String FUNC_LOCKFORWORK = "lockForWork";

    public static final String FUNC_UNLOCKFORWORK = "unlockForWork";

    public static final String FUNC_REWARDFORWORK = "rewardForWork";

    public static final String FUNC_SEIZEFORWORK = "seizeForWork";

    public static final String FUNC_DEPOSIT = "deposit";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC_CHECKBALANCE = "checkBalance";

    public static final Event WORKORDERACTIVATED_EVENT = new Event("WorkOrderActivated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event WORKORDERCLAIMED_EVENT = new Event("WorkOrderClaimed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event WORKORDERCOMPLETED_EVENT = new Event("WorkOrderCompleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event CREATEAPP_EVENT = new Event("CreateApp", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event CREATEDATASET_EVENT = new Event("CreateDataset", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event CREATEWORKERPOOL_EVENT = new Event("CreateWorkerPool", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event CREATECATEGORY_EVENT = new Event("CreateCategory", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event WORKERPOOLSUBSCRIPTION_EVENT = new Event("WorkerPoolSubscription", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}));
    ;

    public static final Event WORKERPOOLUNSUBSCRIPTION_EVENT = new Event("WorkerPoolUnsubscription", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}));
    ;

    public static final Event WORKERPOOLEVICTION_EVENT = new Event("WorkerPoolEviction", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}));
    ;

    public static final Event ACCURATECONTRIBUTION_EVENT = new Event("AccurateContribution", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event FAULTYCONTRIBUTION_EVENT = new Event("FaultyContribution", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event DEPOSIT_EVENT = new Event("Deposit", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event WITHDRAW_EVENT = new Event("Withdraw", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event REWARD_EVENT = new Event("Reward", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SEIZE_EVENT = new Event("Seize", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("1", "0x0d5ef019ca4c5cc413ee892ced89d7107c5f424d");
        _addresses.put("3", "0x63d3215027dfaeab233d8feeddc660724c6b921b");
        _addresses.put("4", "0x32aedc290604f7a674781b232143b837a358d711");
        _addresses.put("42", "0x12b92a17b1ca4bb10b861386446b8b2716e58c9b");
    }

    protected IexecHub(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected IexecHub(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> m_contributionHistory() {
        final Function function = new Function(FUNC_M_CONTRIBUTIONHISTORY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<String> appHub() {
        final Function function = new Function(FUNC_APPHUB, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> STAKE_BONUS_MIN_THRESHOLD() {
        final Function function = new Function(FUNC_STAKE_BONUS_MIN_THRESHOLD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> m_scores(String param0) {
        final Function function = new Function(FUNC_M_SCORES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> workerPoolHub() {
        final Function function = new Function(FUNC_WORKERPOOLHUB, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> SCORE_UNITARY_SLASH() {
        final Function function = new Function(FUNC_SCORE_UNITARY_SLASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> STAKE_BONUS_RATIO() {
        final Function function = new Function(FUNC_STAKE_BONUS_RATIO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> m_categoriesCount() {
        final Function function = new Function(FUNC_M_CATEGORIESCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> marketplace() {
        final Function function = new Function(FUNC_MARKETPLACE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> rlc() {
        final Function function = new Function(FUNC_RLC, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> m_categoriesCreator() {
        final Function function = new Function(FUNC_M_CATEGORIESCREATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> datasetHub() {
        final Function function = new Function(FUNC_DATASETHUB, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> m_accounts(String param0) {
        final Function function = new Function(FUNC_M_ACCOUNTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<Boolean> m_woidRegistered(String param0) {
        final Function function = new Function(FUNC_M_WOIDREGISTERED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Tuple4<BigInteger, String, String, BigInteger>> m_categories(BigInteger param0) {
        final Function function = new Function(FUNC_M_CATEGORIES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple4<BigInteger, String, String, BigInteger>>(
                new Callable<Tuple4<BigInteger, String, String, BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, String, String, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public static RemoteCall<IexecHub> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(IexecHub.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<IexecHub> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(IexecHub.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public List<WorkOrderActivatedEventResponse> getWorkOrderActivatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(WORKORDERACTIVATED_EVENT, transactionReceipt);
        ArrayList<WorkOrderActivatedEventResponse> responses = new ArrayList<WorkOrderActivatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WorkOrderActivatedEventResponse typedResponse = new WorkOrderActivatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.woid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<WorkOrderActivatedEventResponse> workOrderActivatedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, WorkOrderActivatedEventResponse>() {
            @Override
            public WorkOrderActivatedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WORKORDERACTIVATED_EVENT, log);
                WorkOrderActivatedEventResponse typedResponse = new WorkOrderActivatedEventResponse();
                typedResponse.log = log;
                typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.woid = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<WorkOrderActivatedEventResponse> workOrderActivatedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WORKORDERACTIVATED_EVENT));
        return workOrderActivatedEventObservable(filter);
    }

    public List<WorkOrderClaimedEventResponse> getWorkOrderClaimedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(WORKORDERCLAIMED_EVENT, transactionReceipt);
        ArrayList<WorkOrderClaimedEventResponse> responses = new ArrayList<WorkOrderClaimedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WorkOrderClaimedEventResponse typedResponse = new WorkOrderClaimedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.woid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.workerPool = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<WorkOrderClaimedEventResponse> workOrderClaimedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, WorkOrderClaimedEventResponse>() {
            @Override
            public WorkOrderClaimedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WORKORDERCLAIMED_EVENT, log);
                WorkOrderClaimedEventResponse typedResponse = new WorkOrderClaimedEventResponse();
                typedResponse.log = log;
                typedResponse.woid = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.workerPool = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<WorkOrderClaimedEventResponse> workOrderClaimedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WORKORDERCLAIMED_EVENT));
        return workOrderClaimedEventObservable(filter);
    }

    public List<WorkOrderCompletedEventResponse> getWorkOrderCompletedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(WORKORDERCOMPLETED_EVENT, transactionReceipt);
        ArrayList<WorkOrderCompletedEventResponse> responses = new ArrayList<WorkOrderCompletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WorkOrderCompletedEventResponse typedResponse = new WorkOrderCompletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.woid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.workerPool = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<WorkOrderCompletedEventResponse> workOrderCompletedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, WorkOrderCompletedEventResponse>() {
            @Override
            public WorkOrderCompletedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WORKORDERCOMPLETED_EVENT, log);
                WorkOrderCompletedEventResponse typedResponse = new WorkOrderCompletedEventResponse();
                typedResponse.log = log;
                typedResponse.woid = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.workerPool = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<WorkOrderCompletedEventResponse> workOrderCompletedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WORKORDERCOMPLETED_EVENT));
        return workOrderCompletedEventObservable(filter);
    }

    public List<CreateAppEventResponse> getCreateAppEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATEAPP_EVENT, transactionReceipt);
        ArrayList<CreateAppEventResponse> responses = new ArrayList<CreateAppEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateAppEventResponse typedResponse = new CreateAppEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.appOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.app = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.appName = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.appPrice = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.appParams = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CreateAppEventResponse> createAppEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, CreateAppEventResponse>() {
            @Override
            public CreateAppEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CREATEAPP_EVENT, log);
                CreateAppEventResponse typedResponse = new CreateAppEventResponse();
                typedResponse.log = log;
                typedResponse.appOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.app = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.appName = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.appPrice = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.appParams = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<CreateAppEventResponse> createAppEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CREATEAPP_EVENT));
        return createAppEventObservable(filter);
    }

    public List<CreateDatasetEventResponse> getCreateDatasetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATEDATASET_EVENT, transactionReceipt);
        ArrayList<CreateDatasetEventResponse> responses = new ArrayList<CreateDatasetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateDatasetEventResponse typedResponse = new CreateDatasetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.datasetOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.dataset = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.datasetName = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.datasetPrice = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.datasetParams = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CreateDatasetEventResponse> createDatasetEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, CreateDatasetEventResponse>() {
            @Override
            public CreateDatasetEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CREATEDATASET_EVENT, log);
                CreateDatasetEventResponse typedResponse = new CreateDatasetEventResponse();
                typedResponse.log = log;
                typedResponse.datasetOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.dataset = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.datasetName = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.datasetPrice = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.datasetParams = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<CreateDatasetEventResponse> createDatasetEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CREATEDATASET_EVENT));
        return createDatasetEventObservable(filter);
    }

    public List<CreateWorkerPoolEventResponse> getCreateWorkerPoolEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATEWORKERPOOL_EVENT, transactionReceipt);
        ArrayList<CreateWorkerPoolEventResponse> responses = new ArrayList<CreateWorkerPoolEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateWorkerPoolEventResponse typedResponse = new CreateWorkerPoolEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.workerPoolOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.workerPool = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.workerPoolDescription = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CreateWorkerPoolEventResponse> createWorkerPoolEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, CreateWorkerPoolEventResponse>() {
            @Override
            public CreateWorkerPoolEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CREATEWORKERPOOL_EVENT, log);
                CreateWorkerPoolEventResponse typedResponse = new CreateWorkerPoolEventResponse();
                typedResponse.log = log;
                typedResponse.workerPoolOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.workerPool = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.workerPoolDescription = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<CreateWorkerPoolEventResponse> createWorkerPoolEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CREATEWORKERPOOL_EVENT));
        return createWorkerPoolEventObservable(filter);
    }

    public List<CreateCategoryEventResponse> getCreateCategoryEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATECATEGORY_EVENT, transactionReceipt);
        ArrayList<CreateCategoryEventResponse> responses = new ArrayList<CreateCategoryEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateCategoryEventResponse typedResponse = new CreateCategoryEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.catid = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.description = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.workClockTimeRef = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CreateCategoryEventResponse> createCategoryEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, CreateCategoryEventResponse>() {
            @Override
            public CreateCategoryEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CREATECATEGORY_EVENT, log);
                CreateCategoryEventResponse typedResponse = new CreateCategoryEventResponse();
                typedResponse.log = log;
                typedResponse.catid = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.name = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.description = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.workClockTimeRef = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<CreateCategoryEventResponse> createCategoryEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CREATECATEGORY_EVENT));
        return createCategoryEventObservable(filter);
    }

    public List<WorkerPoolSubscriptionEventResponse> getWorkerPoolSubscriptionEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(WORKERPOOLSUBSCRIPTION_EVENT, transactionReceipt);
        ArrayList<WorkerPoolSubscriptionEventResponse> responses = new ArrayList<WorkerPoolSubscriptionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WorkerPoolSubscriptionEventResponse typedResponse = new WorkerPoolSubscriptionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.worker = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<WorkerPoolSubscriptionEventResponse> workerPoolSubscriptionEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, WorkerPoolSubscriptionEventResponse>() {
            @Override
            public WorkerPoolSubscriptionEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WORKERPOOLSUBSCRIPTION_EVENT, log);
                WorkerPoolSubscriptionEventResponse typedResponse = new WorkerPoolSubscriptionEventResponse();
                typedResponse.log = log;
                typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.worker = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<WorkerPoolSubscriptionEventResponse> workerPoolSubscriptionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WORKERPOOLSUBSCRIPTION_EVENT));
        return workerPoolSubscriptionEventObservable(filter);
    }

    public List<WorkerPoolUnsubscriptionEventResponse> getWorkerPoolUnsubscriptionEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(WORKERPOOLUNSUBSCRIPTION_EVENT, transactionReceipt);
        ArrayList<WorkerPoolUnsubscriptionEventResponse> responses = new ArrayList<WorkerPoolUnsubscriptionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WorkerPoolUnsubscriptionEventResponse typedResponse = new WorkerPoolUnsubscriptionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.worker = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<WorkerPoolUnsubscriptionEventResponse> workerPoolUnsubscriptionEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, WorkerPoolUnsubscriptionEventResponse>() {
            @Override
            public WorkerPoolUnsubscriptionEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WORKERPOOLUNSUBSCRIPTION_EVENT, log);
                WorkerPoolUnsubscriptionEventResponse typedResponse = new WorkerPoolUnsubscriptionEventResponse();
                typedResponse.log = log;
                typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.worker = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<WorkerPoolUnsubscriptionEventResponse> workerPoolUnsubscriptionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WORKERPOOLUNSUBSCRIPTION_EVENT));
        return workerPoolUnsubscriptionEventObservable(filter);
    }

    public List<WorkerPoolEvictionEventResponse> getWorkerPoolEvictionEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(WORKERPOOLEVICTION_EVENT, transactionReceipt);
        ArrayList<WorkerPoolEvictionEventResponse> responses = new ArrayList<WorkerPoolEvictionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WorkerPoolEvictionEventResponse typedResponse = new WorkerPoolEvictionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.worker = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<WorkerPoolEvictionEventResponse> workerPoolEvictionEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, WorkerPoolEvictionEventResponse>() {
            @Override
            public WorkerPoolEvictionEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WORKERPOOLEVICTION_EVENT, log);
                WorkerPoolEvictionEventResponse typedResponse = new WorkerPoolEvictionEventResponse();
                typedResponse.log = log;
                typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.worker = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<WorkerPoolEvictionEventResponse> workerPoolEvictionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WORKERPOOLEVICTION_EVENT));
        return workerPoolEvictionEventObservable(filter);
    }

    public List<AccurateContributionEventResponse> getAccurateContributionEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ACCURATECONTRIBUTION_EVENT, transactionReceipt);
        ArrayList<AccurateContributionEventResponse> responses = new ArrayList<AccurateContributionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AccurateContributionEventResponse typedResponse = new AccurateContributionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.worker = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.woid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AccurateContributionEventResponse> accurateContributionEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, AccurateContributionEventResponse>() {
            @Override
            public AccurateContributionEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ACCURATECONTRIBUTION_EVENT, log);
                AccurateContributionEventResponse typedResponse = new AccurateContributionEventResponse();
                typedResponse.log = log;
                typedResponse.worker = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.woid = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<AccurateContributionEventResponse> accurateContributionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ACCURATECONTRIBUTION_EVENT));
        return accurateContributionEventObservable(filter);
    }

    public List<FaultyContributionEventResponse> getFaultyContributionEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FAULTYCONTRIBUTION_EVENT, transactionReceipt);
        ArrayList<FaultyContributionEventResponse> responses = new ArrayList<FaultyContributionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FaultyContributionEventResponse typedResponse = new FaultyContributionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.worker = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.woid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<FaultyContributionEventResponse> faultyContributionEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, FaultyContributionEventResponse>() {
            @Override
            public FaultyContributionEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(FAULTYCONTRIBUTION_EVENT, log);
                FaultyContributionEventResponse typedResponse = new FaultyContributionEventResponse();
                typedResponse.log = log;
                typedResponse.worker = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.woid = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<FaultyContributionEventResponse> faultyContributionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FAULTYCONTRIBUTION_EVENT));
        return faultyContributionEventObservable(filter);
    }

    public List<DepositEventResponse> getDepositEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSIT_EVENT, transactionReceipt);
        ArrayList<DepositEventResponse> responses = new ArrayList<DepositEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositEventResponse typedResponse = new DepositEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DepositEventResponse> depositEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, DepositEventResponse>() {
            @Override
            public DepositEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSIT_EVENT, log);
                DepositEventResponse typedResponse = new DepositEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<DepositEventResponse> depositEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSIT_EVENT));
        return depositEventObservable(filter);
    }

    public List<WithdrawEventResponse> getWithdrawEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(WITHDRAW_EVENT, transactionReceipt);
        ArrayList<WithdrawEventResponse> responses = new ArrayList<WithdrawEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawEventResponse typedResponse = new WithdrawEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<WithdrawEventResponse> withdrawEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, WithdrawEventResponse>() {
            @Override
            public WithdrawEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WITHDRAW_EVENT, log);
                WithdrawEventResponse typedResponse = new WithdrawEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<WithdrawEventResponse> withdrawEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAW_EVENT));
        return withdrawEventObservable(filter);
    }

    public List<RewardEventResponse> getRewardEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REWARD_EVENT, transactionReceipt);
        ArrayList<RewardEventResponse> responses = new ArrayList<RewardEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RewardEventResponse typedResponse = new RewardEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RewardEventResponse> rewardEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, RewardEventResponse>() {
            @Override
            public RewardEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(REWARD_EVENT, log);
                RewardEventResponse typedResponse = new RewardEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<RewardEventResponse> rewardEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REWARD_EVENT));
        return rewardEventObservable(filter);
    }

    public List<SeizeEventResponse> getSeizeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SEIZE_EVENT, transactionReceipt);
        ArrayList<SeizeEventResponse> responses = new ArrayList<SeizeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SeizeEventResponse typedResponse = new SeizeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SeizeEventResponse> seizeEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, SeizeEventResponse>() {
            @Override
            public SeizeEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SEIZE_EVENT, log);
                SeizeEventResponse typedResponse = new SeizeEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<SeizeEventResponse> seizeEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SEIZE_EVENT));
        return seizeEventObservable(filter);
    }

    public RemoteCall<TransactionReceipt> attachContracts(String _tokenAddress, String _marketplaceAddress, String _workerPoolHubAddress, String _appHubAddress, String _datasetHubAddress) {
        final Function function = new Function(
                FUNC_ATTACHCONTRACTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddress), 
                new org.web3j.abi.datatypes.Address(_marketplaceAddress), 
                new org.web3j.abi.datatypes.Address(_workerPoolHubAddress), 
                new org.web3j.abi.datatypes.Address(_appHubAddress), 
                new org.web3j.abi.datatypes.Address(_datasetHubAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setCategoriesCreator(String _categoriesCreator) {
        final Function function = new Function(
                FUNC_SETCATEGORIESCREATOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_categoriesCreator)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> createCategory(String _name, String _description, BigInteger _workClockTimeRef) {
        final Function function = new Function(
                FUNC_CREATECATEGORY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_description), 
                new org.web3j.abi.datatypes.generated.Uint256(_workClockTimeRef)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> createWorkerPool(String _description, BigInteger _subscriptionLockStakePolicy, BigInteger _subscriptionMinimumStakePolicy, BigInteger _subscriptionMinimumScorePolicy) {
        final Function function = new Function(
                FUNC_CREATEWORKERPOOL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_description), 
                new org.web3j.abi.datatypes.generated.Uint256(_subscriptionLockStakePolicy), 
                new org.web3j.abi.datatypes.generated.Uint256(_subscriptionMinimumStakePolicy), 
                new org.web3j.abi.datatypes.generated.Uint256(_subscriptionMinimumScorePolicy)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> createApp(String _appName, BigInteger _appPrice, String _appParams) {
        final Function function = new Function(
                FUNC_CREATEAPP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_appName), 
                new org.web3j.abi.datatypes.generated.Uint256(_appPrice), 
                new org.web3j.abi.datatypes.Utf8String(_appParams)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> createDataset(String _datasetName, BigInteger _datasetPrice, String _datasetParams) {
        final Function function = new Function(
                FUNC_CREATEDATASET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_datasetName), 
                new org.web3j.abi.datatypes.generated.Uint256(_datasetPrice), 
                new org.web3j.abi.datatypes.Utf8String(_datasetParams)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> buyForWorkOrder(BigInteger _marketorderIdx, String _workerpool, String _app, String _dataset, String _params, String _callback, String _beneficiary) {
        final Function function = new Function(
                FUNC_BUYFORWORKORDER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_marketorderIdx), 
                new org.web3j.abi.datatypes.Address(_workerpool), 
                new org.web3j.abi.datatypes.Address(_app), 
                new org.web3j.abi.datatypes.Address(_dataset), 
                new org.web3j.abi.datatypes.Utf8String(_params), 
                new org.web3j.abi.datatypes.Address(_callback), 
                new org.web3j.abi.datatypes.Address(_beneficiary)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> isWoidRegistred(String _woid) {
        final Function function = new Function(FUNC_ISWOIDREGISTRED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_woid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> claimFailedConsensus(String _woid) {
        final Function function = new Function(
                FUNC_CLAIMFAILEDCONSENSUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_woid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> finalizeWorkOrder(String _woid, String _stdout, String _stderr, String _uri) {
        final Function function = new Function(
                FUNC_FINALIZEWORKORDER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_woid), 
                new org.web3j.abi.datatypes.Utf8String(_stdout), 
                new org.web3j.abi.datatypes.Utf8String(_stderr), 
                new org.web3j.abi.datatypes.Utf8String(_uri)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getCategoryWorkClockTimeRef(BigInteger _catId) {
        final Function function = new Function(FUNC_GETCATEGORYWORKCLOCKTIMEREF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_catId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> existingCategory(BigInteger _catId) {
        final Function function = new Function(FUNC_EXISTINGCATEGORY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_catId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Tuple4<BigInteger, String, String, BigInteger>> getCategory(BigInteger _catId) {
        final Function function = new Function(FUNC_GETCATEGORY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_catId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple4<BigInteger, String, String, BigInteger>>(
                new Callable<Tuple4<BigInteger, String, String, BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, String, String, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<Tuple2<String, BigInteger>> getWorkerStatus(String _worker) {
        final Function function = new Function(FUNC_GETWORKERSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_worker)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<String, BigInteger>>(
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getWorkerScore(String _worker) {
        final Function function = new Function(FUNC_GETWORKERSCORE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_worker)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> registerToPool(String _worker) {
        final Function function = new Function(
                FUNC_REGISTERTOPOOL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_worker)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> unregisterFromPool(String _worker) {
        final Function function = new Function(
                FUNC_UNREGISTERFROMPOOL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_worker)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> evictWorker(String _worker) {
        final Function function = new Function(
                FUNC_EVICTWORKER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_worker)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> lockForOrder(String _user, BigInteger _amount) {
        final Function function = new Function(
                FUNC_LOCKFORORDER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_user), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> unlockForOrder(String _user, BigInteger _amount) {
        final Function function = new Function(
                FUNC_UNLOCKFORORDER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_user), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> lockForWork(String _woid, String _user, BigInteger _amount) {
        final Function function = new Function(
                FUNC_LOCKFORWORK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_woid), 
                new org.web3j.abi.datatypes.Address(_user), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> unlockForWork(String _woid, String _user, BigInteger _amount) {
        final Function function = new Function(
                FUNC_UNLOCKFORWORK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_woid), 
                new org.web3j.abi.datatypes.Address(_user), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> rewardForWork(String _woid, String _worker, BigInteger _amount, Boolean _reputation) {
        final Function function = new Function(
                FUNC_REWARDFORWORK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_woid), 
                new org.web3j.abi.datatypes.Address(_worker), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount), 
                new org.web3j.abi.datatypes.Bool(_reputation)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> seizeForWork(String _woid, String _worker, BigInteger _amount, Boolean _reputation) {
        final Function function = new Function(
                FUNC_SEIZEFORWORK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_woid), 
                new org.web3j.abi.datatypes.Address(_worker), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount), 
                new org.web3j.abi.datatypes.Bool(_reputation)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> deposit(BigInteger _amount) {
        final Function function = new Function(
                FUNC_DEPOSIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> withdraw(BigInteger _amount) {
        final Function function = new Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> checkBalance(String _owner) {
        final Function function = new Function(FUNC_CHECKBALANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public static IexecHub load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new IexecHub(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static IexecHub load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new IexecHub(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class WorkOrderActivatedEventResponse {
        public Log log;

        public String workerPool;

        public String woid;
    }

    public static class WorkOrderClaimedEventResponse {
        public Log log;

        public String woid;

        public String workerPool;
    }

    public static class WorkOrderCompletedEventResponse {
        public Log log;

        public String woid;

        public String workerPool;
    }

    public static class CreateAppEventResponse {
        public Log log;

        public String appOwner;

        public String app;

        public String appName;

        public BigInteger appPrice;

        public String appParams;
    }

    public static class CreateDatasetEventResponse {
        public Log log;

        public String datasetOwner;

        public String dataset;

        public String datasetName;

        public BigInteger datasetPrice;

        public String datasetParams;
    }

    public static class CreateWorkerPoolEventResponse {
        public Log log;

        public String workerPoolOwner;

        public String workerPool;

        public String workerPoolDescription;
    }

    public static class CreateCategoryEventResponse {
        public Log log;

        public BigInteger catid;

        public String name;

        public String description;

        public BigInteger workClockTimeRef;
    }

    public static class WorkerPoolSubscriptionEventResponse {
        public Log log;

        public String workerPool;

        public String worker;
    }

    public static class WorkerPoolUnsubscriptionEventResponse {
        public Log log;

        public String workerPool;

        public String worker;
    }

    public static class WorkerPoolEvictionEventResponse {
        public Log log;

        public String workerPool;

        public String worker;
    }

    public static class AccurateContributionEventResponse {
        public Log log;

        public String worker;

        public String woid;
    }

    public static class FaultyContributionEventResponse {
        public Log log;

        public String worker;

        public String woid;
    }

    public static class DepositEventResponse {
        public Log log;

        public String owner;

        public BigInteger amount;
    }

    public static class WithdrawEventResponse {
        public Log log;

        public String owner;

        public BigInteger amount;
    }

    public static class RewardEventResponse {
        public Log log;

        public String user;

        public BigInteger amount;
    }

    public static class SeizeEventResponse {
        public Log log;

        public String user;

        public BigInteger amount;
    }
}
